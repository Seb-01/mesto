{"version":3,"file":"main.08db9e26a81e464fc613.js","mappings":"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","sources":["webpack://mesto/./src/scripts/constants.js","webpack://mesto/./src/scripts/Card.js","webpack://mesto/./src/scripts/auxfunc.js","webpack://mesto/./src/scripts/FormValidator.js","webpack://mesto/./src/scripts/Section.js","webpack://mesto/./src/scripts/Popup.js","webpack://mesto/./src/scripts/PopupWithImage.js","webpack://mesto/./src/scripts/PopupWithForm.js","webpack://mesto/./src/scripts/UserInfo.js","webpack://mesto/./src/pages/index.js","webpack://mesto/./src/scripts/Api.js"],"sourcesContent":["/** Объект с настройками валидации форм */\r\nexport const enableValidationSettings = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__save-button',\r\n  inactiveButtonClass: 'popup__save-buton_inactive',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__input-error_active'\r\n};\r\n\r\n/** Раздел объявления констант */\r\nexport const cohort = 'cohort-40';\r\nexport const token = '42ba884f-b283-49c9-8264-0bf37bf4771e';\r\n\r\n/** форма редактирования профиля */\r\nexport const profileEditForm = document.querySelector('.popup__edit-profile-form');\r\n\r\n/** форма обнолвения аватара */\r\nexport const avatarEditForm = document.querySelector('.popup_target_update-avatar');\r\n\r\n/** форма добавления карточки */\r\nexport const itemAddForm = document.querySelector('.popup__add-item-form');\r\n\r\n/** кнопка \"редактировать профиль\" */\r\nexport const profileEditButton = document.querySelector('.profile__edit-button');\r\n/** кнопка \"добавить карточку\" */\r\nexport const itemAddButton = document.querySelector('.profile__add-button');\r\n/** кнопка \"обновить аватар\" */\r\nexport const avatarEditButton = document.querySelector('.profile__edit-avatar-button');\r\n\r\n/** поля input формы редактирования профиля */\r\nexport const nameInput = document.querySelector('.popup__input_field_name');\r\nexport const jobInput = document.querySelector('.popup__input_field_job');\r\n\r\n/** поля в профиле */\r\nexport const title = document.querySelector('.profile__title');\r\nexport const subtitle = document.querySelector('.profile__subtitle');\r\n\r\n","import { checkId } from '../scripts/auxfunc.js';\r\n\r\n/** Класс Card, который создаёт карточку с текстом и ссылкой на изображение\r\n *\r\n */\r\nexport class Card {\r\n  // в конструкторе будут динамические данные,\r\n  // для каждого экземпляра свои: карточка с текстом, с ссылкой на изображение и селектор её template-элемента;\r\n  constructor(isTrash, userId, ownerId, id, text, image, likes, templateSelector, popupElem,\r\n    handleCardClick, handleCardDelete, handleCardLike) {\r\n    // приватные поля, они нужны только внутри класса\r\n    this._text = text;\r\n    this._image = image;\r\n    this._likes = likes; // массив лайков карточки\r\n    this._templateSelector = templateSelector;\r\n    this._popupElem = popupElem;\r\n    this._handleCardClick = handleCardClick;\r\n    this._handleCardDelete = handleCardDelete;\r\n    this._handleCardLike = handleCardLike;\r\n    this._isTrash = isTrash;\r\n    this._id = id; // id карточки\r\n    this._userId = userId; // id пользователя из профиля\r\n    this._ownerId = ownerId; //id пользователя, который добавил карточку\r\n  }\r\n\r\n  /** Функция, которая вернет разметку для карточки\r\n   *\r\n   */\r\n  _getTemplate() {\r\n    // забираем разметку из HTML и клонируем элемент\r\n    const cardElement = document\r\n    .querySelector(this._templateSelector)\r\n    .content\r\n    // Почему мы селектор карточки также не передаем в конструкторе?\r\n    .querySelector('.elements__card')\r\n    .cloneNode(true);\r\n\r\n    // вернём DOM-элемент карточки\r\n    return cardElement;\r\n  }\r\n\r\n  /** Функция - обработчик клика на кнопке Like\r\n   * @param {object} evt - событие\r\n   */\r\n  _likeCard(evt) {\r\n    this._handleCardLike({cardElem: this._element, cardId: this._id});\r\n  }\r\n\r\n  /** Функция - обработчик клика на кнопке trash\r\n   * @param {object} evt - событие\r\n   */\r\n  _deleteCard(evt) {\r\n      // передаем данные элемента на обработку\r\n      this._handleCardDelete({cardElem: this._element, cardId: this._id});\r\n  }\r\n\r\n  /** Функция, которая навешивает слушатели\r\n   *\r\n   */\r\n  _setEventListeners() {\r\n    // кнопка Like\r\n    this._element.querySelector('.elements__like-button').addEventListener('click', (evt) => {\r\n      this._likeCard(evt);\r\n    })\r\n\r\n    // кнопка trash\r\n    this._element.querySelector('.elements__trash-button').addEventListener('click', (evt) => {\r\n      this._deleteCard(evt);\r\n    })\r\n\r\n    // клик на изображении карточки\r\n    //обработчик в конструкторе получили\r\n    this._element.querySelector('.elements__photo').addEventListener('click', this._handleCardClick);\r\n  }\r\n\r\n  /**  Функция, которая подготавливает карточку на основе шаблона\r\n   *\r\n   */\r\n  prepareCard() {\r\n    // Запишем разметку в приватное поле _element. У других элементов появится доступ к ней.\r\n    this._element = this._getTemplate();\r\n    const photoElem = this._element.querySelector('.elements__photo');\r\n\r\n    // Добавим данные\r\n    photoElem.src = this._image;\r\n    photoElem.alt = this._text;\r\n    this._element.querySelector('.elements__title').textContent = this._text;\r\n    this._element.querySelector('.elements__likes-number').textContent = this._likes.length;\r\n\r\n    // иконка trash\r\n    if (!this._isTrash)\r\n      this._element.querySelector('.elements__trash-button').style.display = \"none\";\r\n\r\n    // цвет сердечка: если id есть в likes, то добавляем elements__like-button_active\r\n    if (checkId(this._likes, this._userId))\r\n      this._element.querySelector('.elements__like-button').classList.add('elements__like-button_active');\r\n\r\n\r\n    // Выставляем слушатели\r\n    this._setEventListeners();\r\n\r\n    // возвращаем готовую карточку\r\n    return this._element;\r\n  }\r\n\r\n}\r\n\r\n","/** Функция для проверки наличия в массиве объекта с заданным свойством _id\r\n *\r\n * @param {string} arr - массив\r\n * @param {object} targerId - искомый id\r\n */\r\nexport function checkId(arr, targerId) {\r\n  // идем по массиву\r\n  for (let index = 0; index < arr.length; ++index) {\r\n    if (arr[index]._id === targerId)\r\n      // как только нашли совпадение - выходим с возвратом true\r\n      return true;\r\n  };\r\n\r\n return false;\r\n}\r\n","/** Класс FormValidator для валидации заданной формы\n *\n */\nexport class FormValidator {\n   constructor(settings, formElem) {\n    this._formSelector = settings.formSelector;\n    this._inputSelector = settings.inputSelector;\n    this._submitButtonSelector = settings.submitButtonSelector;\n    this._inactiveButtonClass = settings.inactiveButtonClass;\n    this._inputErrorClass = settings.inputErrorClass;\n    this._errorClass = settings.errorClass;\n    this._formElem = formElem;\n  }\n\n  /** Функция проверки списка полей ввода инфо на наличие хоть одной ошибки\n   *\n   */\n  _hasInvalidInput() {\n    // проходим по массиву полей ввода методом some\n  return Array.from(this._inputList).some((inputElement) => {\n    // Если поле не валидно, колбэк вернёт true\n    // Обход массива прекратится и вся фунцкция hasInvalidInput вернёт true\n    return !inputElement.validity.valid;\n  })\n  }\n\n\n  /** Функция актуализации кнопки submit\n   *\n   */\n   _toggleButtonState() {\n    // Если есть хотя бы один невалидный инпут\n    if (this._hasInvalidInput()) {\n      // сделай кнопку неактивной\n      this._buttonElement.classList.add(this._inactiveButtonClass);\n      this._buttonElement.setAttribute('disabled', true);\n    } else {\n      // иначе - сделай кнопку активной\n      this._buttonElement.classList.remove(this._inactiveButtonClass);\n      this._buttonElement.removeAttribute('disabled');\n    }\n  }\n\n  /** Функция для вывода сообщения об ошибке в поле input\n   *\n   * @param {object} inputElement - поле input\n   */\n  _showInputError(inputElement) {\n    // находим элемент span, где выводится ошибка (суффикс -error)\n    const errorElement = this._formElem.querySelector(`.${inputElement.id}-error`);\n    // оформляем поле input как содержащее ошибку ввода\n    inputElement.classList.add(this._inputErrorClass);\n    // оформляем элемент, информирующий об ошибке\n    errorElement.textContent = inputElement.validationMessage;\n    errorElement.classList.add(this._errorClass);\n  }\n\n  /** Функция для скрытия сообщения об ошибке в поле input\n   *\n   * @param {object} inputElement - поле input\n   */\n  _hideInputError(inputElement) {\n    // находим элемент span, где выводится ошибка (суффикс -error)\n    const errorElement = this._formElem.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.remove(this._inputErrorClass);\n    errorElement.classList.remove(this._errorClass);\n    errorElement.textContent = '';\n  }\n\n  /** Функция проверяет поле на валидность\n   *\n   */\n  _checkInputValidity(inputElement) {\n    // если поле не валидно, то показываем ошибку\n    if (!inputElement.validity.valid) {\n      this._showInputError(inputElement);\n    }\n    // иначе - причем ошибки\n    else {\n      this._hideInputError(inputElement);\n    }\n  }\n\n  /** Устанавливаем слушатели\n   *\n   */\n  _setEventListeners() {\n    // до начала ввода данных в форме актуализируем кнопку submit\n    this._toggleButtonState();\n\n    this._inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', () => {\n        this._checkInputValidity(inputElement);\n        // актуализируем кнопку submit\n        this._toggleButtonState();\n      });\n    });\n  }\n\n\n  /** Метод, который очищает поля формы от ошибок и акутализирует статус кнопки submit\n   *\n   *\n   */\n  clearFormInputError() {\n\n    this._inputList.forEach((inputElement) => {\n      this._hideInputError(inputElement);\n    });\n\n    this._toggleButtonState();\n  }\n\n  /** Функция включает валидацию формы\n   *\n   */\n  enableValidation() {\n    // добавляем в арибуты класса все input-поля формы\n    this._inputList = Array.from(this._formElem.querySelectorAll(this._inputSelector));\n    // добавляем в арибуты класса кнопку submit формы\n    this._buttonElement = this._formElem.querySelector(this._submitButtonSelector);\n\n    this._setEventListeners ();\n  }\n}\n\n","/** Класс Section, который отвечает за отрисовку элементов на странице\r\n *\r\n */\r\n export class Section {\r\n  constructor({ renderer }, containerSelector) {\r\n    this._renderer = renderer; // Свойство = функция, которая отвечает за создание и отрисовку данных на странице\r\n    this._container = document.querySelector(containerSelector);\r\n }\r\n\r\n/** Публичный метод, который получает массив начальных элементов при загрузке страницы\r\n  *\r\n  */\r\n setCardItems(arr) {\r\n  this._renderedItems = Array.from(arr);\r\n }\r\n\r\n\r\n /** Публичный метод, который отвечает за отрисовку всех начальных элементов при загрузке страницы\r\n  *\r\n  */\r\n renderItems() {\r\n    this._renderedItems.forEach(item => this._renderer(item));\r\n }\r\n\r\n /** Публичный метод, который принимает DOM-элемент и добавляет его в контейнер\r\n  *\r\n  * @param {object} element - новая карточка\r\n  */\r\n addItem(element) {\r\n    this._container.prepend(element);\r\n }\r\n}\r\n\r\n\r\n","/** Класс Popup, который отвечает за открытие и закрытие попапа\r\n *\r\n */\r\n export class Popup {\r\n  constructor(popupSelector) {\r\n    this._popup = document.querySelector(popupSelector);\r\n    this._handleEscClose = this._handleEscClose.bind(this);\r\n  }\r\n\r\n\r\n /** Публичный метод, который отвечает за открытие popup\r\n  *\r\n  */\r\n open() {\r\n  this._popup.classList.add('popup_opened');\r\n  // добавялем обработчики закрытия по Esc. Заботимся о контексте\r\n  // клик мыши на overlay мы добавляем один раз (!) при создании popup\r\n  document.addEventListener('keydown', this._handleEscClose);\r\n }\r\n\r\n /** Публичный метод, который отвечает за закрытие popup\r\n  *\r\n  */\r\n close() {\r\n  // Закрываем popup\r\n  this._popup.classList.remove('popup_opened');\r\n  // убираем обработчик Esc. Заботимся о контексте\r\n  document.removeEventListener('keydown', this._handleEscClose);\r\n }\r\n\r\n /** Приватный метод, который содержит логику закрытия попапа клавишей Esc\r\n  *\r\n  */\r\n _handleEscClose(evt) {\r\n  // если нажали Esc - закрываем popup\r\n  if(evt.key === 'Escape') {\r\n    this.close();\r\n  }\r\n}\r\n\r\n /** Публичный метод, который добавляет слушатель клика иконке закрытия попапа\r\n  *\r\n  */\r\n setEventListeners() {\r\n\r\n  this._popup.addEventListener('mousedown', (event) => {\r\n    // получаем иконку закрытия popup\r\n    this._buttonClose = this._popup.querySelector('.popup__close-button');\r\n\r\n    if (event.target !== event.currentTarget && event.target !== this._buttonClose) {\r\n      return;\r\n    }\r\n    else\r\n      this.close();\r\n    }\r\n    );\r\n  }\r\n}\r\n","\r\nimport {Popup} from './Popup.js';\r\n\r\n/** Класс PopupWithImage, который отвечает за открытие и закрытие попапа c картинкой\r\n *\r\n */\r\n export class PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n\r\n    this._pictureElem = this._popup.querySelector('.popup__picture');\r\n    this._captionElem = this._popup.querySelector('.popup__figure-caption');\r\n\r\n }\r\n\r\n /** Метод для установки данных, поднимаемой карточки\r\n  *\r\n  * @param {string} cardText\r\n  * @param {string} cardImage\r\n  */\r\n setCardData(cardText, cardImage) {\r\n  this._cardText = cardText;\r\n  this._cardImage = cardImage;\r\n }\r\n\r\n /** В методе open класса PopupWithImage нужно вставлять в попап картинку с src изображения и подписью к картинке\r\n  *\r\n  */\r\n open() {\r\n\r\n    // сообщаем popup данные картинки, которую поднимаем\r\n    this._pictureElem.src = this._cardImage;\r\n    this._pictureElem.alt = this._cardText;\r\n    this._captionElem.textContent = this._cardText;\r\n\r\n    super.open()\r\n\r\n }\r\n}\r\n","import {Popup} from './Popup.js';\r\n\r\n/** Класс PopupWithForm, который отвечает за открытие и закрытие попапа c формой\r\n *\r\n */\r\nexport class PopupWithForm extends Popup {\r\n  constructor(popupSelector, handleSubmit) {\r\n    super(popupSelector);\r\n    // обработчик submit\r\n    this._handleSubmit = handleSubmit;\r\n }\r\n\r\n /** Приватный метод, который собирает данные всех полей формы\r\n  *\r\n  */\r\n _getInputValues() {\r\n    // список input-полей формы, которую \"поднимает\" popup\r\n    // возможно, селектор input-полей также следует передавать в конструкторе!\r\n    this._inputList = this._popup.querySelectorAll('.popup__input');\r\n\r\n    // создаём пустой объект\r\n    this._formValues = {};\r\n\r\n    // добавляем в этот объект значения всех полей\r\n    this._inputList.forEach(input => {\r\n      // Ключами этого объекта будут атрибуты name каждого поля\r\n      this._formValues[input.name] = input.value;\r\n    });\r\n\r\n    // возвращаем объект значений\r\n    return this._formValues;\r\n }\r\n\r\n /** Метод не только добавляет обработчик клика иконке закрытия, но и обработчик сабмита формы\r\n  *\r\n  */\r\n setEventListeners() {\r\n\r\n  this._popup.addEventListener('submit', (evt) => {\r\n    evt.preventDefault();\r\n    this._handleSubmit(this._getInputValues());\r\n    //this.close();\r\n  });\r\n\r\n  super.setEventListeners();\r\n }\r\n\r\n /** Перезаписывает родительский метод close, так как при закрытии попапа форма должна ещё и сбрасываться\r\n  *\r\n  */\r\n close() {\r\n  //нужно очистить поля формы перед закрытием\r\n  // возможно, селектор формы также следует передавать в конструкторе!\r\n  this._popup.querySelector('.popup__form').reset();\r\n\r\n  super.close();\r\n }\r\n\r\n}\r\n","import {title} from './constants';\r\nimport {subtitle} from './constants';\r\n\r\n/** Класс UserInfo, который отвечает за управление отображением информации о пользователе на странице\r\n *\r\n */\r\n export class UserInfo {\r\n   constructor(avatarSelector) {\r\n      this._userName = 'no name';\r\n      this._userAboutSelf = 'no about';\r\n      this._avatarElem = document.querySelector(avatarSelector);\r\n    }\r\n\r\n  /** Публичный метод, который возвращает объект с данными пользователя\r\n   *\r\n   * @returns {object} userInfo\r\n   */\r\n  getUserInfo() {\r\n    return {user_name: this._userName, user_id: this._userId, about_self: this._userAboutSelf};\r\n  }\r\n\r\n  /** Публичный метод, который сохраняет и отображает новые данные пользователя\r\n   * @param {object} newProfileData - данные профиля пользователя\r\n   *\r\n   */\r\n  setUserInfo(newProfileData) {\r\n    // получили данные с сервера: имя, род занятий и аватар\r\n    this._userName = newProfileData.name;\r\n    this._userAboutSelf = newProfileData.about;\r\n    this._avatar = newProfileData.avatar;\r\n    this._userId = newProfileData._id;\r\n\r\n    // обновим данные в разметке\r\n    title.textContent = this._userName;\r\n    subtitle.textContent = this._userAboutSelf;\r\n    this._avatarElem.src = this._avatar;\r\n  }\r\n\r\n /** Публичный метод, для смены аватара\r\n * @param {object} newAvatar - URL нового аватара\r\n *\r\n */\r\n setUserAvatar(newAvatar) {\r\n    this._avatar = newAvatar;\r\n    this._avatarElem.src = this._avatar;\r\n }\r\n\r\n}\r\n","// Раздел импорта\r\n// для webpack в точке входа нужно указать главный css файл\r\n// и подключить все остальные js\r\nimport './index.css';\r\n\r\nimport {enableValidationSettings} from '../scripts/constants.js';\r\n\r\nimport {profileEditForm} from '../scripts/constants.js';\r\nimport {avatarEditForm} from '../scripts/constants.js';\r\nimport {itemAddForm} from '../scripts/constants.js';\r\nimport {profileEditButton} from '../scripts/constants.js';\r\nimport {avatarEditButton} from '../scripts/constants.js';\r\nimport {itemAddButton} from '../scripts/constants.js';\r\nimport {nameInput} from '../scripts/constants.js';\r\nimport {jobInput} from '../scripts/constants.js';\r\n\r\n\r\nimport { Card } from '../scripts/Card.js';\r\nimport { FormValidator } from '../scripts/FormValidator.js';\r\nimport { Section } from '../scripts/Section.js';\r\nimport { PopupWithImage } from '../scripts/PopupWithImage.js';\r\nimport { PopupWithForm } from '../scripts/PopupWithForm.js';\r\nimport { UserInfo } from '../scripts/UserInfo.js';\r\n\r\nimport {cohort} from '../scripts/constants.js';\r\nimport {token} from '../scripts/constants.js';\r\nimport { Api } from '../scripts/Api.js';\r\n\r\n\r\n// Раздел объявления функций:\r\n\r\n/** Функция для создания карточки\r\n *\r\n */\r\n function createCard(userId, ownerId, newId, newName, newLink, newlikes, cardTemplate, imagePopup) {\r\n\r\n  // здесь решаем: будет ли корзина на карточке или нет\r\n  let isTrash = false;\r\n  if (ownerId === userId)\r\n    isTrash = true;\r\n\r\n  //создаем карточку:\r\n  const card = new Card(isTrash, userId, ownerId, newId, newName, newLink, newlikes, cardTemplate, imagePopup,\r\n    //эта функция-обработчик должна открывать попап с картинкой при клике на карточку\r\n    () => {\r\n      // передаем в popup данные поднимаемой карточки\r\n      card._popupElem.setCardData(card._text, card._image);\r\n      card._popupElem.open();\r\n    },\r\n    // функция подтверждения удаления карточки\r\n    ({cardElem, cardId}) => {\r\n      // привязываем в свойства карточку, на которой нажали кнопку удалить\r\n      confirmFormPopup.cardElem = cardElem;\r\n      confirmFormPopup.cardId = cardId;\r\n      confirmFormPopup.open();\r\n    },\r\n    //\r\n    ({cardElem, cardId}) => {\r\n      const likeButtonElem = cardElem.querySelector('.elements__like-button');\r\n      const likeNumberElem = cardElem.querySelector('.elements__likes-number');\r\n\r\n      // если карточку уже лайкали\r\n      if(likeButtonElem.classList.contains('elements__like-button_active')) {\r\n        api.deleteLike(cardId)\r\n          // сall-back, который будет вызван, как только данные будут готовы!\r\n          .then((result) => {\r\n            // уменьшаем количество лайков\r\n            likeNumberElem.textContent = result.likes.length;\r\n            likeButtonElem.classList.toggle('elements__like-button_active');\r\n\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Ошибка при dislike карточки: ${err}!`);\r\n          }\r\n        );\r\n      }\r\n      else {\r\n        // лайкаем карточку:\r\n        api.likeCard(cardId)\r\n        // сall-back, который будет вызван, как только данные будут готовы!\r\n        .then((result) => {\r\n          // увеличиваем количество лайков\r\n          likeNumberElem.textContent = result.likes.length;\r\n          likeButtonElem.classList.toggle('elements__like-button_active');\r\n\r\n        })\r\n        // сall-back, который будет вызван в случае ошибки!\r\n        .catch((err) => {\r\n          console.log(`Ошибка при like карточки: ${err}!`);\r\n        }\r\n    );\r\n\r\n      }\r\n    }\r\n  );\r\n\r\n  // подготовка карточки и добавление его в контейнер\r\n  cardsList.addItem(card.prepareCard());\r\n}\r\n\r\n/** Функция открытия формы редактирования профиля\r\n * @param {object} profileEditFormValidator - экземпляр валидатора\r\n */\r\nfunction showEditProfileForm(profileEditFormValidator) {\r\n  // данные пользователя подставляем в форму при открытии\r\n  const userInfo = user.getUserInfo();\r\n  nameInput.value = userInfo.user_name;\r\n  jobInput.value = userInfo.about_self;\r\n\r\n  // поднимаем popup\r\n  profileFormPopup.open();\r\n\r\n  // убираем ошибки полей ввода формы и актуализируем состояние кнопки submit\r\n  profileEditFormValidator.clearFormInputError();\r\n}\r\n\r\n/** Функция открытия формы добавления новой карточки\r\n * @param {object} itemAddFormValidator - экземпляр валидатора\r\n */\r\nfunction showAddItemForm(itemAddFormValidator) {\r\n  // поднимаем popup\r\n  addItemFormPopup.open();\r\n\r\n  // убираем ошибки полей ввода формы и актуализируем состояние кнопки submit\r\n  itemAddFormValidator.clearFormInputError();\r\n}\r\n\r\n/** Функция обновления аватара\r\n * @param {object} avatarEditFormValidator - экземпляр валидатора\r\n */\r\n function showEditAvatarForm(avatarEditFormValidator) {\r\n  // поднимаем popup\r\n  editAvatarFormPopup.open();\r\n\r\n  // убираем ошибки полей ввода формы и актуализируем состояние кнопки submit\r\n  avatarEditFormValidator.clearFormInputError();\r\n}\r\n\r\n// Работаем:\r\n\r\n// создаем класс для взаимодействия с сервером Mesto\r\nconst api = new Api({\r\n  baseUrl: `https://mesto.nomoreparties.co/v1/${cohort}`,\r\n  headers: {\r\n    authorization: token\r\n  }\r\n});\r\n\r\n// создаем профиль пользователя\r\nconst user = new UserInfo('.profile__avatar');\r\n\r\n// Создаем popup для отображения карточки:\r\nconst imagePopup = new PopupWithImage('.popup_target_picture-view');\r\nimagePopup.setEventListeners();\r\n\r\n// создаем экземпляр класса PopupWithForm для редактирования профиля\r\nconst profileFormPopup = new PopupWithForm('.popup_target_profile',\r\n  //вторым параметром передаем колбэк сабмита формы, т.к. нужно учесть логику формы\r\n  (formData) => {\r\n    // сохраняем новые значения user\r\n    // На время выполнения запроса меняем текст кнопки submit и не закрываем popup\r\n    const button = document.querySelector('.popup_target_profile').querySelector('.popup__save-button');\r\n    const prevButtonText = button.textContent;\r\n    button.textContent =  'Сохранение...';\r\n\r\n    api.saveNewProfile(formData)\r\n    .then((result) => {\r\n      user.setUserInfo(result);\r\n      // закрываем popup после выполнения запроса\r\n      profileFormPopup.close();\r\n      button.textContent =  prevButtonText;\r\n\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка при сохранении данных профиля пользователя: ${err}!`)\r\n    }\r\n  );\r\n\r\n  });\r\n// устанавливаем слушатели\r\nprofileFormPopup.setEventListeners();\r\n\r\n// создаем экземпляр класса PopupWithForm для добавления карточки\r\nconst addItemFormPopup = new PopupWithForm('.popup_target_add-item',\r\n  //вторым параметром передаем колбэк сабмита формы, т.к. нужно учесть логику формы\r\n  (formData) => {\r\n\r\n    // На время выполнения запроса меняем текст кнопки submit и не закрываем popup\r\n    const button = document.querySelector('.popup_target_add-item').querySelector('.popup__save-button');\r\n    const prevButtonText = button.textContent;\r\n    button.textContent =  'Сохранение...';\r\n\r\n    // вначале отправим карточку на сервер:\r\n    api.addCard(formData)\r\n    .then((result) => {\r\n      // создаем и добавляем карточку в DOM!\r\n      createCard(user.getUserInfo().user_id, result.owner._id, result._id, result.name, result.link, [], '#card-template', imagePopup);\r\n      // теперь только закрываем окно\r\n      addItemFormPopup.close();\r\n      button.textContent =  prevButtonText;\r\n\r\n    })\r\n    // если поймали ошибку\r\n    .catch((err) => {\r\n      console.log(`Ошибка при сохранении карточки: ${err}!`)\r\n    }\r\n    );\r\n});\r\n\r\n// устанавливаем слушатели\r\naddItemFormPopup.setEventListeners();\r\n\r\n// создаем экземпляр класса PopupWithForm для подтверждения удаления карточки\r\nconst confirmFormPopup = new PopupWithForm('.popup_target_confirm',\r\n  //вторым параметром передаем колбэк сабмита формы, т.к. нужно учесть логику работы формы\r\n  () => {\r\n      // идем на сервер\r\n      api.deleteCard(confirmFormPopup)\r\n      .then((result) => {\r\n        // удалим элемент из DOM\r\n        confirmFormPopup.cardElem.remove();\r\n        // после удаления element лучше занулить\r\n        confirmFormPopup.cardElem = null;\r\n        // закрываем окно:\r\n        confirmFormPopup.close();\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Ошибка при обработке результатов запроса на удаление карточки : ${err}!`);\r\n      });\r\n    }\r\n);\r\n\r\n// устанавливаем слушатели\r\nconfirmFormPopup.setEventListeners();\r\n\r\n// создаем экземпляр класса PopupWithForm для редактирования аватара пользователя\r\nconst editAvatarFormPopup = new PopupWithForm('.popup_target_update-avatar',\r\n  //вторым параметром передаем колбэк сабмита формы, т.к. нужно учесть логику формы\r\n  (newAvatar) => {\r\n\r\n    // На время выполнения запроса меняем текст кнопки submit и не закрываем popup\r\n    const button = document.querySelector('.popup_target_update-avatar').querySelector('.popup__save-button');\r\n    const prevButtonText = button.textContent;\r\n    button.textContent =  'Сохранение...';\r\n\r\n    // вначале отправим данные на сервер:\r\n    api.updateAvatar(newAvatar)\r\n    .then((result) => {\r\n      // создаем и добавляем карточку в DOM!\r\n      user.setUserAvatar(result.avatar);\r\n      // теперь только закрываем окно\r\n      editAvatarFormPopup.close();\r\n      button.textContent =  prevButtonText;\r\n\r\n    })\r\n    // если поймали ошибку\r\n    .catch((err) => {\r\n      console.log(`Ошибка при сохранении аватара: ${err}!`)\r\n    }\r\n    );\r\n}\r\n);\r\n\r\n// устанавливаем слушатели\r\neditAvatarFormPopup.setEventListeners();\r\n\r\n// Создаем экземпляр класса FormValidator для editAvatarFormPopup\r\nconst avatarEditFormValidator = new FormValidator(enableValidationSettings, avatarEditForm);\r\navatarEditFormValidator.enableValidation();\r\n\r\n// Создаем экземпляр класса FormValidator для profileEditForm\r\nconst profileEditFormValidator = new FormValidator(enableValidationSettings, profileEditForm);\r\nprofileEditFormValidator.enableValidation();\r\n\r\n// Создаем экземпляр класса FormValidator для itemAddForm\r\nconst itemAddFormValidator = new FormValidator(enableValidationSettings, itemAddForm);\r\nitemAddFormValidator.enableValidation();\r\n\r\n// назначаем событие - нажали на копку \"Редактировать профиль\"\r\nprofileEditButton.addEventListener('click', () => { showEditProfileForm(profileEditFormValidator); });\r\n\r\n// назначаем событие - нажали на кнопку \"Добавить карточку\"\r\nitemAddButton.addEventListener('click', () => { showAddItemForm(itemAddFormValidator); });\r\n\r\n// назначаем событие - нажали на кнопку \"Обновить аватар\"\r\navatarEditButton.addEventListener('click', () => { showEditAvatarForm(avatarEditFormValidator); });\r\n\r\nconst cardsList = new Section({renderer:\r\n  ({_id: newId, name: newName, link: newLink, likes: newLikes, owner: {_id: ownerId}}) => {\r\n    createCard(user.getUserInfo().user_id, ownerId, newId, newName, newLink, newLikes, '#card-template', imagePopup);\r\n  }\r\n}, '.elements');\r\n\r\n// В процессе загрузки сайта загружаем данные с сервера: профиль пользователя и карточки\r\n// запускаем несколько промисов параллельно: для загрузки профиля и начальных карточек\r\nconst promiseUser = api.getUserProfile();\r\nconst promiseCards = api.getInitialCards();\r\n\r\nPromise.all([promiseUser, promiseCards])\r\n  // обрабатываем полученные данные\r\n  .then (data => {\r\n    // профиль пользователя сохраняем\r\n    user.setUserInfo(data[0]);\r\n    // получаем карточки\r\n    cardsList.setCardItems(data[1]);\r\n    // отрисовываем карточки\r\n    cardsList.renderItems();\r\n  })\r\n","/** Класс Api, который предоставляет методы для запросов к сервису mesto\r\n *\r\n */\r\nexport class Api {\r\n  constructor(options) {\r\n    this._baseUrl = options.baseUrl;\r\n    this._headers = options.headers;\r\n  }\r\n\r\n\r\n  /** Публичный метод для загрузки карточек\r\n   *\r\n   */\r\n  getInitialCards() {\r\n    const request = this._baseUrl + '/cards';\r\n    return fetch(request,\r\n      {\r\n        method: \"GET\",\r\n        headers: this._headers\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка загруки карточек пользователей: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /** Публичный метод для загрузки пользовательского профиля\r\n   *\r\n   */\r\n  getUserProfile() {\r\n    const request = this._baseUrl + '/users/me';\r\n    return fetch(request,\r\n      {\r\n        method: \"GET\",\r\n        headers: this._headers\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка загруки профиля пользователя: ${res.status}`);\r\n      });\r\n   }\r\n\r\n  /** Публичный метод для удаления карточки\r\n   * @param {object} formPopup - экземпляр popup с подтверждением удаления карточки\r\n   */\r\n  deleteCard(formPopup) {\r\n    const request = this._baseUrl + `/cards/${formPopup.cardId}`;\r\n    // удаляем элемент с сервера\r\n    return fetch(request,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: this._headers\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка при удалении карточки с сервера: ${res.status}`);\r\n      });\r\n   }\r\n\r\n  /** Публичный метод для добавления карточки\r\n   * @param {object} cardData - данные карточки\r\n   */\r\n  addCard(cardData) {\r\n    const request = this._baseUrl + '/cards';\r\n    const newHeaders = this._headers;\r\n    newHeaders['Content-Type'] = 'application/json';\r\n    // отправляем запрос на добавление карточки\r\n    return fetch(request,\r\n      {\r\n        method: \"POST\",\r\n        headers: newHeaders,\r\n        body: JSON.stringify({\r\n          name: cardData.name,\r\n          link: cardData.link\r\n        })\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка при добавлении карточки на сервер: ${res.status}`);\r\n      });\r\n   }\r\n\r\n  /** Публичный метод для сохранения данных профиля пользователя\r\n   * @param {object} profileData - данные карточки\r\n   */\r\n  saveNewProfile(profileData) {\r\n    const request = this._baseUrl + '/users/me';\r\n    const newHeaders = this._headers;\r\n    newHeaders['Content-Type'] = 'application/json';\r\n    // отправляем запрос\r\n    return fetch(request,\r\n      {\r\n        method: \"PATCH\",\r\n        headers: newHeaders,\r\n        body: JSON.stringify({\r\n          name: profileData.name,\r\n          about: profileData.job\r\n        })\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка при добавлении карточки на сервер: ${res.status}`);\r\n      });\r\n   }\r\n\r\n  /** Публичный метод для Обновления автара в профиле пользователя\r\n   * @param {object} newAvatar - ссылка на новый аватар\r\n   */\r\n  updateAvatar(newAvatar) {\r\n    const request = this._baseUrl + '/users/me/avatar';\r\n    const newHeaders = this._headers;\r\n    newHeaders['Content-Type'] = 'application/json';\r\n    // отправляем запрос\r\n    return fetch(request,\r\n      {\r\n        method: \"PATCH\",\r\n        headers: newHeaders,\r\n        body: JSON.stringify({\r\n          avatar: newAvatar.link\r\n        })\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка при добавлении карточки на сервер: ${res.status}`);\r\n      });\r\n   }\r\n\r\n  /** Публичный метод для удаления лайка карточки\r\n   * @param {object} cardId - id карточки\r\n   */\r\n  deleteLike(cardId) {\r\n    const request = this._baseUrl + `/cards/${cardId}/likes`;\r\n    // отправляем запрос\r\n    return fetch(request,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: this._headers\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка при удалении карточки: ${res.status}`);\r\n      });\r\n   }\r\n\r\n     /** Публичный метод для лайка карточки\r\n   * @param {object} cardId - id карточки\r\n   */\r\n  likeCard(cardId) {\r\n    const request = this._baseUrl + `/cards/${cardId}/likes`;\r\n    // отправляем запрос\r\n    return fetch(request,\r\n      {\r\n        method: \"PUT\",\r\n        headers: this._headers\r\n      })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        // если ошибка, отклоняем промис\r\n        return Promise.reject(`Ошибка при лайке карточки: ${res.status}`);\r\n      });\r\n   }\r\n}\r\n\r\n"],"names":["enableValidationSettings","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","profileEditForm","document","querySelector","avatarEditForm","itemAddForm","profileEditButton","itemAddButton","avatarEditButton","nameInput","jobInput","title","subtitle","Card","isTrash","userId","ownerId","id","text","image","likes","templateSelector","popupElem","handleCardClick","handleCardDelete","handleCardLike","this","_text","_image","_likes","_templateSelector","_popupElem","_handleCardClick","_handleCardDelete","_handleCardLike","_isTrash","_id","_userId","_ownerId","content","cloneNode","evt","cardElem","_element","cardId","addEventListener","_likeCard","_deleteCard","_getTemplate","photoElem","src","alt","textContent","length","style","display","arr","targerId","index","checkId","classList","add","_setEventListeners","FormValidator","settings","formElem","_formSelector","_inputSelector","_submitButtonSelector","_inactiveButtonClass","_inputErrorClass","_errorClass","_formElem","Array","from","_inputList","some","inputElement","validity","valid","_hasInvalidInput","_buttonElement","setAttribute","remove","removeAttribute","errorElement","validationMessage","_hideInputError","_showInputError","_toggleButtonState","forEach","_checkInputValidity","querySelectorAll","Section","containerSelector","renderer","_renderer","_container","_renderedItems","item","element","prepend","Popup","popupSelector","_popup","_handleEscClose","bind","removeEventListener","key","close","event","_buttonClose","target","currentTarget","PopupWithImage","_pictureElem","_captionElem","cardText","cardImage","_cardText","_cardImage","PopupWithForm","handleSubmit","_handleSubmit","_formValues","input","name","value","preventDefault","_getInputValues","reset","UserInfo","avatarSelector","_userName","_userAboutSelf","_avatarElem","user_name","user_id","about_self","newProfileData","about","_avatar","avatar","newAvatar","createCard","newId","newName","newLink","newlikes","cardTemplate","imagePopup","card","setCardData","open","confirmFormPopup","likeButtonElem","likeNumberElem","contains","api","deleteLike","then","result","toggle","catch","err","console","log","likeCard","cardsList","addItem","prepareCard","options","_baseUrl","baseUrl","_headers","headers","request","fetch","method","res","ok","json","Promise","reject","status","formPopup","cardData","newHeaders","body","JSON","stringify","link","profileData","job","authorization","user","setEventListeners","profileFormPopup","formData","button","prevButtonText","saveNewProfile","setUserInfo","addItemFormPopup","addCard","getUserInfo","owner","deleteCard","editAvatarFormPopup","updateAvatar","setUserAvatar","avatarEditFormValidator","enableValidation","profileEditFormValidator","itemAddFormValidator","userInfo","clearFormInputError","showEditProfileForm","showAddItemForm","showEditAvatarForm","newLikes","promiseUser","getUserProfile","promiseCards","getInitialCards","all","data","setCardItems","renderItems"],"sourceRoot":""}